<php-config-options>
    
<section name="Language Options">
    <option id="engine">
        <desc>Enable the PHP scripting language engine under Apache.</desc>
         <default disabled="0">On</default>
    </option>

    <option id="zend.ze1_compatibility_mode">
        <desc>Enable compatibility mode with Zend Engine 1 (PHP 4.x)</desc>
         <default disabled="0">Off</default>
    </option>

    <option id="short_open_tag">
        <desc><![CDATA[Allow the <? tag.  Otherwise, only <?php and <script> tags 
are recognized.
            
NOTE: Using short tags should be avoided when developing applications or 
libraries that are meant for redistribution, or deployment on PHP servers 
which are not under your control, because short tags may not be supported 
on the target server. For portable, redistributable code, be sure not to use 
short tags.]]></desc>
        <default disabled="0">On</default>
    </option>

    <option id="asp_tags">
        <desc><![CDATA[Allow ASP-style <% %> tags.]]></desc>
        <default disabled="0">Off</default>
    </option>

    <option id="precision">
        <desc>The number of significant digits displayed in floating point numbers.</desc>
        <default disabled="0">12</default>
    </option>

    <option id="y2k_compliance">
        <desc>Enforce year 2000 compliance (will cause problems with non-compliant browsers)</desc>
        <default disabled="0">On</default>
    </option>

    <option id="output_buffering">
        <desc>Output buffering allows you to send header lines (including cookies) 
even after you send body content, at the price of slowing PHP's output 
layer a bit. You can enable output buffering during runtime by calling the 
output buffering functions.  You can also enable output buffering for all files 
by setting this directive to On.  If you wish to limit the size of the buffer to a 
certain size - you can use a maximum number of bytes instead of 'On', as 
a value for this directive (e.g., output_buffering=4096).</desc>
         <default disabled="0">Off</default>
    </option>

    <option id="output_handler">
        <desc>You can redirect all of the output of your scripts to a function. For 
example, if you set output_handler to "mb_output_handler", character 
encoding will be transparently converted to the specified encoding. 
Setting any output handler automatically turns on output buffering.
            
Note: People who wrote portable scripts should not depend on this ini 
directive. Instead, explicitly set the output handler using ob_start(). 
Using this ini directive may cause problems unless you know what script 
is doing.
            
Note: You cannot use both "mb_output_handler" with "ob_iconv_handler" 
and you cannot use both "ob_gzhandler" and "zlib.output_compression". 
Note: output_handler must be empty if this is set 'On' !!!! 
Instead you must use zlib.output_handler.</desc>
         <default disabled="1"></default>
    </option>

    <option id="zlib.output_compression">
        <desc>Transparent output compression using the zlib library. Valid values 
for this option are 'off', 'on', or a specific buffer size to be used for 
compression (default is 4KB)
            
Note: Resulting chunk size may vary due to nature of compression. PHP 
outputs chunks that are few hundreds bytes each as a result of 
compression. If you prefer a larger chunk size for better performance, 
enable output_buffering in addition.
            
Note: You need to use zlib.output_handler instead of the standard 
output_handler, or otherwise the output will be corrupted.</desc>
         <default disabled="0">Off</default>
    </option>

    <option id="zlib.output_handler">
        <desc>You cannot specify additional output handlers if zlib.output_compression 
is activated here. This setting does the same as output_handler but in a 
different order.</desc>
         <default disabled="1"></default>
    </option>

    <option id="implicit_flush">
        <desc>Implicit flush tells PHP to tell the output layer to flush itself automatically 
after every output block.  This is equivalent to calling the PHP function flush() 
after each and every call to print() or echo() and each and every HTML block. 
Turning this option on has serious performance implications and is generally 
recommended for debugging purposes only.</desc>
         <default disabled="0">Off</default>
    </option>

    <option id="unserialize_callback_func">
        <desc>The unserialize callback function will be called (with the undefined class' 
name as parameter), if the unserializer finds an undefined class which should 
be instantiated. A warning appears if the specified function is not defined, or 
if the function doesn't include/implement the missing class. So only set this 
entry, if you really want to implement such a callback-function.</desc>
         <default disabled="0"></default>
    </option>

    <option id="serialize_precision">
        <desc><![CDATA[When floats & doubles are serialized store serialize_precision 
significant digits after the floating point. The default value ensures that when 
floats are decoded with unserialize, the data will remain the same.]]></desc>
         <default disabled="0">100</default>
    </option>

    <option id="allow_call_time_pass_reference">
        <desc>Whether to enable the ability to force arguments to be passed by 
reference at function call time.  This method is deprecated and is likely 
to be unsupported in future versions of PHP/Zend.  The encouraged 
method of specifying which arguments should be passed by reference 
is in the function declaration.  You're encouraged to try and turn this 
option Off and make sure your scripts work properly with it in order to 
ensure they will work with future versions of the language (you will 
receive a warning each time you use this feature, and the argument will 
be passed by value instead of by reference).</desc>
         <default disabled="0">On</default>
    </option>

    <option id="safe_mode">
        <desc>Safe Mode</desc>
         <default disabled="0">Off</default>
    </option>

    <option id="safe_mode_gid">
        <desc>By default, Safe Mode does a UID compare check when opening files. 
If you want to relax this to a GID compare, then turn on safe_mode_gid.</desc>
        <default disabled="0">Off</default>
    </option>

    <option id="safe_mode_include_dir">
        <desc>When safe_mode is on, UID/GID checks are bypassed when including 
files from this directory and its subdirectories. (directory must also be in 
include_path or full path must be used when including)</desc>
        <default disabled="0"></default>
    </option>

    <option id="safe_mode_exec_dir">
        <desc>When safe_mode is on, only executables located in the safe_mode_exec_dir
will be allowed to be executed via the exec family of functions.</desc>
        <default disabled="0"></default>
    </option>

    <option id="safe_mode_allowed_env_vars">
        <desc>Setting certain environment variables may be a potential security breach. 
This directive contains a comma-delimited list of prefixes. In Safe Mode, 
the user may only alter environment variables whose names begin with the 
prefixes supplied here.  By default, users will only be able to set environment 
variables that begin with PHP_ (e.g. PHP_FOO=BAR).
            
Note:  If this directive is empty, PHP will let the user modify ANY 
environment variable!</desc>
        <default disabled="0">PHP_</default>
    </option>

    <option id="safe_mode_protected_env_vars">
        <desc>This directive contains a comma-delimited list of environment variables 
that the end user won't be able to change using putenv().  These variables will 
be protected even if safe_mode_allowed_env_vars is set to allow to change them.</desc>
        <default disabled="0">LD_LIBRARY_PATH</default>
    </option>

    <option id="open_basedir">
        <desc>open_basedir, if set, limits all file operations to the defined directory and 
below.  This directive makes most sense if used in a per-directory or 
per-virtualhost web server configuration file. This directive is *NOT* affected 
by whether Safe Mode is turned On or Off.</desc>
        <default disabled="1"></default>
    </option>

    <option id="disable_functions">
        <desc>This directive allows you to disable certain functions for security reasons. 
It receives a comma-delimited list of function names. This directive is *NOT* 
affected by whether Safe Mode is turned On or Off.</desc>
        <default disabled="0"></default>
    </option>

    <option id="disable_classes">
        <desc>This directive allows you to disable certain classes for security reasons. 
It receives a comma-delimited list of class names. This directive is *NOT* 
affected by whether Safe Mode is turned On or Off.</desc>
        <default disabled="0"></default>
    </option>

    <option id="highlight.string">
        <desc><![CDATA[Colors for Syntax Highlighting mode.  Anything that's 
acceptable in <span style="color: ???????"> would work.]]></desc>
        <default disabled="1">#DD0000</default>
    </option>

    <option id="highlight.comment">
        <desc><![CDATA[Colors for Syntax Highlighting mode.  Anything that's 
acceptable in <span style="color: ???????"> would work.]]></desc>
         <default disabled="1">#FF9900</default>
    </option>

    <option id="highlight.keyword">
        <desc><![CDATA[Colors for Syntax Highlighting mode.  Anything that's 
acceptable in <span style="color: ???????"> would work.]]></desc>
         <default disabled="1">#007700</default>
    </option>

    <option id="highlight.bg">
        <desc><![CDATA[Colors for Syntax Highlighting mode.  Anything that's 
acceptable in <span style="color: ???????"> would work.]]></desc>
         <default disabled="1">#FFFFFF</default>
    </option>

    <option id="highlight.default">
        <desc><![CDATA[Colors for Syntax Highlighting mode.  Anything that's 
acceptable in <span style="color: ???????"> would work.]]></desc>
         <default disabled="1">#0000BB</default>
    </option>

    <option id="highlight.html">
        <desc><![CDATA[Colors for Syntax Highlighting mode.  Anything that's 
acceptable in <span style="color: ???????"> would work.]]></desc>
         <default disabled="1">#000000</default>
    </option>

    <option id="ignore_user_abort">
        <desc>If enabled, the request will be allowed to complete even if the user 
aborts the request. Consider enabling it if executing long request, which 
may end up being interrupted by the user or a browser timing out.</desc>
         <default disabled="1">On</default>
    </option>

    <option id="expose_php">
        <desc>Decides whether PHP may expose the fact that it is installed on the 
server (e.g. by adding its signature to the Web server header).  It is no 
security threat in any way, but it makes it possible to determine whether 
you use PHP on your server or not.</desc>
         <default disabled="0">On</default>
    </option>
</section>

<section name="Resource Limits">
    <option id="max_execution_time">
        <desc>Maximum execution time of each script, in seconds</desc>
        <default disabled="0">30</default>
    </option>

    <option id="max_input_time">
        <desc>Maximum amount of time each script may spend parsing request data</desc>
        <default disabled="0">60</default>
    </option>

    <option id="memory_limit">
        <desc>Maximum amount of memory a script may consume (8MB)</desc>
        <default disabled="0">8M</default>
    </option>
</section>

<section name="Error handling and logging">
    <option id="error_reporting">
        <desc>error_reporting is a bit-field.  Or each number up to get desired error 
reporting level
            
            E_ALL                             - All errors and warnings (doesn't include E_STRICT)
            E_ERROR                        - fatal run-time errors
            E_RECOVERABLE_ERROR  - almost fatal run-time errors
            E_WARNING                    - run-time warnings (non-fatal errors)
            E_PARSE                         - compile-time parse errors
            E_NOTICE                       - run-time notices (these are warnings which often result
                                                    from a bug in your code, but it's possible that it was
                                                    intentional (e.g., using an uninitialized variable and
                                                    relying on the fact it's automatically initialized to an
                                                    empty string)
            E_STRICT     		     - run-time notices, enable to have PHP suggest changes
                                                    to your code which will ensure the best interoperability
                                                    and forward compatibility of your code
            E_CORE_ERROR              - fatal errors that occur during PHP's initial startup
            E_CORE_WARNING          - warnings (non-fatal errors) that occur during PHP's
                                                   initial startup
            E_COMPILE_ERROR          - fatal compile-time errors
            E_COMPILE_WARNING      - compile-time warnings (non-fatal errors)
            E_USER_ERROR               - user-generated error message
            E_USER_WARNING           - user-generated warning message
            E_USER_NOTICE              - user-generated notice message
            
            Examples:
                - Show all errors, except for notices and coding standards warnings
                - Show all errors, except for notices
                - Show only errors
                - Show all errors except for notices and coding standards warnings</desc>
        <default disabled="0"><![CDATA[E_ALL & ~E_NOTICE]]></default>
    </option>

    <option id="display_errors">
        <desc>Print out errors (as a part of the output).  For production web sites, 
you're strongly encouraged to turn this feature off, and use error logging 
instead (see below).  Keeping display_errors enabled on a production web site 
may reveal security information to end users, such as file paths on your Web 
server, your database schema or other information.</desc>
        <default disabled="0">On</default>
    </option>

    <option id="display_startup_errors">
        <desc>Even when display_errors is on, errors that occur during PHP's startup 
sequence are not displayed.  It's strongly recommended to keep 
display_startup_errors off, except for when debugging.</desc>
         <default disabled="0">Off</default>
    </option>

    <option id="log_errors">
        <desc>Log errors into a log file (server-specific log, stderr, or error_log (below)) 
As stated above, you're strongly advised to use error logging in place of 
error displaying on production web sites.</desc>
        <default disabled="0">Off</default>
    </option>

    <option id="log_errors_max_len">
        <desc>Set maximum length of log_errors. In error_log information about the source 
is added. The default is 1024 and 0 allows to not apply any maximum length at all.</desc>
        <default disabled="0">1024</default>
    </option>

    <option id="ignore_repeated_errors">
        <desc>Do not log repeated messages. Repeated errors must occur in same file on same 
line until ignore_repeated_source is set true.</desc>
        <default disabled="0">Off</default>
    </option>

    <option id="ignore_repeated_source">
        <desc>Ignore source of message when ignoring repeated messages. When this setting 
is On you will not log errors with repeated messages from different files or 
sourcelines.</desc>
        <default disabled="0">Off</default>
    </option>

    <option id="report_memleaks">
        <desc>If this parameter is set to Off, then memory leaks will not be shown (on 
stdout or in the log). This has only effect in a debug compile, and if 
error reporting includes E_WARNING in the allowed list</desc>
         <default disabled="0">On</default>
    </option>

    <option id="track_errors">
        <desc>Store the last error/warning message in $php_errormsg (boolean).</desc>
        <default disabled="0">Off</default>
    </option>

    <option id="html_errors">
        <desc>Disable the inclusion of HTML tags in error messages. 
            Note: Never use this feature for production boxes.</desc>
        <default disabled="1">Off</default>
    </option>

    <option id="docref_root">
        <desc>If html_errors is set On PHP produces clickable error messages that direct 
to a page describing the error or function causing the error in detail. 
You can download a copy of the PHP manual from http://www.php.net/docs.php 
and change docref_root to the base URL of your local copy including the 
leading '/'. You must also specify the file extension being used including 
the dot.
            
            Note: Never use this feature for production boxes.</desc>
        <default disabled="1">"/phpmanual/"</default>
    </option>

    <option id="docref_ext">
        <desc></desc>
        <default disabled="1">.html</default>
    </option>

    <option id="error_prepend_string">
        <desc>String to output before an error message.</desc>
        <default disabled="1"><![CDATA["<font color=ff0000>"]]></default>
    </option>

    <option id="error_append_string">
        <desc>String to output after an error message.</desc>
        <default disabled="1"><![CDATA["</font>"]]></default>
    </option>

    <option id="error_log">
        <desc>Log errors to specified file.</desc>
        <default disabled="1">filename</default>
    </option>

    <option id="error_log">
        <desc>Log errors to syslog (Event Log on NT, not valid in Windows 95).</desc>
        <default disabled="1">syslog</default>
    </option>
</section>

<section name="Data Handling">
    <option id="arg_separator.output">
        <desc><![CDATA[Note - track_vars is ALWAYS enabled as of PHP 4.0.3 
The separator used in PHP generated URLs to separate arguments. 
Default is "&".]]></desc>
        <default disabled="1"><![CDATA["&amp;"]]></default>
    </option>

    <option id="arg_separator.input">
        <desc><![CDATA[List of separator(s) used by PHP to parse input URLs into 
variables. Default is "&".
            
NOTE: Every character in this directive is considered as separator!]]></desc>
        <default disabled="1"><![CDATA[";&"]]></default>
    </option>

    <option id="variables_order">
        <desc><![CDATA[This directive describes the order in which PHP registers GET, 
POST, Cookie, Environment and Built-in variables (G, P, C, E & S respectively, 
often referred to as EGPCS or GPC).  Registration is done from left to right, newer
values override older values.]]></desc>
         <default disabled="0">"EGPCS"</default>
    </option>

    <option id="register_globals">
        <desc>Whether or not to register the EGPCS variables as global variables. 
You may want to turn this off if you don't want to clutter your scripts' 
global scope with user data.  This makes most sense when coupled with 
track_vars - in which case you can access all of the GPC variables through 
the $HTTP_*_VARS[], variables.
            
You should do your best to write your scripts so that they do not require 
register_globals to be on;  Using form variables as globals can easily lead 
to possible security problems, if the code is not very well thought of.</desc>
        <default disabled="0">Off</default>
    </option>

    <option id="register_long_arrays">
        <desc>Whether or not to register the old-style input arrays, HTTP_GET_VARS 
and friends.  If you're not using them, it's recommended to turn them off, 
for performance reasons.</desc>
        <default disabled="0">On</default>
    </option>

    <option id="register_argc_argv">
        <desc><![CDATA[This directive tells PHP whether to declare the argv&argc 
variables (that would contain the GET information).  If you don't use these 
variables, you should turn it off for increased performance.]]></desc>
        <default disabled="0">On</default>
    </option>

    <option id="auto_globals_jit">
        <desc>When enabled, the SERVER and ENV variables are created when they're 
first used (Just In Time) instead of when the script starts. If these variables 
are not used within a script, having this directive on will result in a 
performance gain. The PHP directives register_globals, register_long_arrays, 
and register_argc_argv must be disabled for this directive to have any affect.</desc>
        <default disabled="0">On</default>
    </option>

    <option id="post_max_size">
        <desc>Maximum size of POST data that PHP will accept.</desc>
        <default disabled="0">8M</default>
    </option>
    
    <option id="magic_quotes">
        <desc>Magic Quotes</desc>
        <default disabled="0">On</default>
    </option>
    
    <option id="magic_quotes_gpc">
        <desc>Magic quotes for incoming GET/POST/Cookie data.</desc>
        <default disabled="0">On</default>
    </option>

    <option id="magic_quotes_runtime">
        <desc>Magic quotes for runtime-generated data, e.g. data from SQL, from exec(), etc.</desc>
        <default disabled="0">Off</default>
    </option>

    <option id="magic_quotes_sybase">
        <desc>Use Sybase-style magic quotes (escape ' with '' instead of \').</desc>
        <default disabled="0">Off</default>
    </option>

    <option id="auto_prepend_file">
        <desc>Automatically add files before or after any PHP document.</desc>
        <default disabled="0"></default>
    </option>

    <option id="auto_append_file">
        <desc></desc>
        <default disabled="0"></default>
    </option>

    <option id="default_mimetype">
        <desc>As of 4.0b4, PHP always outputs a character encoding by default in 
the Content-type: header.  To disable sending of the charset, simply set it 
to be empty. PHP's built-in default is text/html</desc>
        <default disabled="0">"text/html"</default>
    </option>

    <option id="default_charset">
        <desc></desc>
        <default disabled="1">"iso-8859-1"</default>
    </option>

    <option id="always_populate_raw_post_data">
        <desc>Always populate the $HTTP_RAW_POST_DATA variable.</desc>
        <default disabled="1">On</default>
    </option>

    <option id="unicode_semantics">
        <desc>Unicode settings</desc>
        <default disabled="0">off</default>
    </option>

    <option id="unicode.runtime_encoding">
        <desc></desc>
        <default disabled="0">iso-8859-1</default>
    </option>

    <option id="unicode.script_encoding">
        <desc></desc>
        <default disabled="0">utf-8</default>
    </option>

    <option id="unicode.output_encoding">
        <desc></desc>
        <default disabled="0">utf-8</default>
    </option>

    <option id="unicode.from_error_mode">
        <desc></desc>
        <default disabled="0">U_INVALID_SUBSTITUTE</default>
    </option>

    <option id="unicode.from_error_subst_char">
        <desc></desc>
        <default disabled="0">3f</default>
    </option>
</section>

<section name="Paths and Directories">
    <option id="doc_root">
        <desc>UNIX: "/path1:/path2" 
                    Windows: "\path1;\path2"
The root of the PHP pages, used only if nonempty. If PHP was not 
compiled with FORCE_REDIRECT, you SHOULD set doc_root. If you 
are running php as a CGI under any web server (other than IIS) see 
documentation for security issues.  The alternate is to use the 
cgi.force_redirect configuration below</desc>
       <default disabled="1"></default>
    </option>

    <option id="user_dir">
        <desc>The directory under which PHP opens the script using 
/~username used only if nonempty.</desc>
        <default disabled="0"></default>
    </option>

    <option id="extension_dir">
        <desc>Directory in which the loadable extensions (modules) reside.</desc>
        <default disabled="0">"./"</default>
    </option>

    <option id="enable_dl">
        <desc>Whether or not to enable the dl() function.  The dl() function does 
NOT work properly in multithreaded servers, such as IIS or Zeus, and is 
automatically disabled on them.</desc>
        <default disabled="0">On</default>
    </option>

    <option id="cgi.force_redirect">
        <desc>cgi.force_redirect is necessary to provide security running PHP 
as a CGI under most web servers.  Left undefined, PHP turns this on 
by default.  You can turn it off here AT YOUR OWN RISK 
            
**You CAN safely turn this off for IIS, in fact, you MUST.**</desc>
        <default disabled="1">1</default>
    </option>

    <option id="cgi.nph">
        <desc>If cgi.nph is enabled it will force cgi to always sent Status: 200 with 
every request.</desc>
        <default disabled="1">1</default>
    </option>

    <option id="cgi.redirect_status_env">
        <desc>If cgi.force_redirect is turned on, and you are not running under 
Apache or Netscape (iPlanet) web servers, you MAY need to set an 
environment variable name that PHP will look for to know it is OK to 
continue execution.  Setting this variable MAY cause security issues, 
KNOW WHAT YOU ARE DOING FIRST.</desc>
        <default disabled="1"></default>
    </option>

    <option id="fastcgi.impersonate">
        <desc>FastCGI under IIS (on WINNT based OS) supports the ability to 
impersonate security tokens of the calling client.  This allows IIS to 
define the security context that the request runs under.  
mod_fastcgi under Apache does not currently support this feature 
(03/17/2002) Set to 1 if running under IIS.  Default is zero.</desc>
        <default disabled="1">1</default>
    </option>

    <option id="fastcgi.log">
        <desc>Disable logging through FastCGI connection</desc>
        <default disabled="1">0</default>
    </option>

    <option id="cgi.rfc2616_headers">
        <desc>cgi.rfc2616_headers configuration option tells PHP what type of 
headers to use when sending HTTP response code. If it's set 0 PHP 
sends Status: header that is supported by Apache. When this option is 
set to 1 PHP will send RFC2616 compliant header. Default is zero.</desc>
        <default disabled="1">0</default>
    </option>
</section>

<section name="File Uploads">
    <option id="file_uploads">
        <desc>Whether to allow HTTP file uploads.</desc>
        <default disabled="0">On</default>
    </option>

    <option id="upload_tmp_dir">
        <desc>Temporary directory for HTTP uploaded files (will use system 
default if not specified).</desc>
        <default disabled="1"></default>
    </option>

    <option id="upload_max_filesize">
        <desc>Maximum allowed size for uploaded files.</desc>
        <default disabled="0">2M</default>
    </option>
</section>

<section name="Fopen wrappers">
    <option id="allow_url_fopen">
        <desc>Whether to allow the treatment of URLs (like http:// or ftp://) as files.</desc>
        <default disabled="0">On</default>
    </option>

    <option id="allow_url_include">
        <desc>Whether to allow code execution through URL wrappers</desc>
        <default disabled="0">Off</default>
    </option>

    <option id="from">
        <desc>Define the anonymous ftp password (your email address)</desc>
        <default disabled="1">"user@example.com"</default>
    </option>

    <option id="user_agent">
        <desc>Define the User-Agent string</desc>
        <default disabled="1">"PHP"</default>
    </option>

    <option id="default_socket_timeout">
        <desc>Default timeout for socket based streams (seconds)</desc>
        <default disabled="0">60</default>
    </option>

    <option id="auto_detect_line_endings">
        <desc>If your scripts have to deal with files from Macintosh systems, 
or you are running on a Mac and need to deal with files from 
unix or win32 systems, setting this flag will cause PHP to 
automatically detect the EOL character in those files so that 
fgets() and file() will work regardless of the source of the file.</desc>
        <default disabled="1">Off</default>
    </option>
</section>

<section name="Dynamic Extensions">
    <option id="extension">
        <desc>If you wish to have an extension loaded automatically, use the following 
syntax:
            
            extension=modulename.extension
            
            For example, on Windows:
            extension=msql.dll
            
            ... or under UNIX:
            extension=msql.so
            
Note that it should be the name of the module only; no directory information 
needs to go here.  Specify the location of the extension with the extension_dir 
directive above.
            
Windows Extensions
    Note that ODBC support is built in, so no dll is needed for it.
    Note that many DLL files are located in the extensions/ (PHP 4) ext/ (PHP 5)
    extension folders as well as the separate PECL DLL download (PHP 5).
    Be sure to appropriately set the extension_dir directive.</desc>
        <default disabled="0"></default>
    </option>
</section>

<section name="--Date">
    <option id="date.timezone">
        <desc>Defines the default timezone used by the date functions</desc>
        <default disabled="0"></default>
    </option>
</section>

<section name="--Syslog">
    <option id="define_syslog_variables">
        <desc>Whether or not to define the various syslog variables (e.g. $LOG_PID, 
$LOG_CRON, etc.).  Turning it off is a good idea performance-wise.  In 
runtime, you can define these variables by calling define_syslog_variables().</desc>
        <default disabled="0">Off</default>
    </option>
</section>

<section name="--Mail function">
    <option id="SMTP">
        <desc>For Win32 only.</desc>
        <default disabled="0">localhost</default>
    </option>

    <option id="smtp_port">
        <desc></desc>
        <default disabled="0">25</default>
    </option>

    <option id="sendmail_from">
        <desc>For Win32 only.</desc>
        <default disabled="0">me@example.com</default>
    </option>

    <option id="sendmail_path">
        <desc>For Unix only.  You may supply arguments as well (default: "sendmail -t -i").</desc>
        <default disabled="0"></default>
    </option>

    <option id="mail.force_extra_parameters">
        <desc>Force the addition of the specified parameters to be passed as extra 
parameters to the sendmail binary. These parameters will always replace 
the value of the 5th parameter to mail(), even in safe mode.</desc>
        <default disabled="0"></default>
    </option>
</section>

<section name="--SQL">
    <option id="sql.safe_mode">
        <desc></desc>
        <default disabled="0">Off</default>
    </option>
</section>

<section name="--ODBC">
    <option id="odbc.default_db">
        <desc></desc>
        <default disabled="1">Not yet implemented</default>
    </option>

    <option id="odbc.default_user">
        <desc></desc>
        <default disabled="1">Not yet implemented</default>
    </option>

    <option id="odbc.default_pw">
        <desc></desc>
        <default disabled="1">Not yet implemented</default>
    </option>

    <option id="odbc.allow_persistent">
        <desc>Allow or prevent persistent links.</desc>
        <default disabled="0">On</default>
    </option>

    <option id="odbc.check_persistent">
        <desc>Check that a connection is still valid before reuse.</desc>
        <default disabled="0">On</default>
    </option>

    <option id="odbc.max_persistent">
        <desc>Maximum number of persistent links.  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>

    <option id="odbc.max_links">
        <desc>Maximum number of links (persistent + non-persistent).  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>

    <option id="odbc.defaultlrl">
        <desc>Handling of LONG fields.  Returns number of bytes to variables.  0 means 
            passthru.</desc>
        <default disabled="0">4096</default>
    </option>

    <option id="odbc.defaultbinmode">
        <desc>Handling of binary data.  0 means passthru, 1 return as is, 2 convert to 
char. See the documentation on odbc_binmode and odbc_longreadlen for an 
explanation of uodbc.defaultlrl and uodbc.defaultbinmode</desc>
        <default disabled="0">1</default>
    </option>

</section>

<section name="--MySQL">
    <option id="mysql.allow_persistent">
        <desc>Allow or prevent persistent links.</desc>
        <default disabled="0">On</default>
    </option>

    <option id="mysql.max_persistent">
        <desc>Maximum number of persistent links.  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>

    <option id="mysql.max_links">
        <desc>Maximum number of links (persistent + non-persistent).  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>

    <option id="mysql.default_port">
        <desc>Default port number for mysql_connect().  If unset, mysql_connect() will use
the $MYSQL_TCP_PORT or the mysql-tcp entry in /etc/services or the
compile-time value defined MYSQL_PORT (in that order).  Win32 will only look
at MYSQL_PORT.</desc>
        <default disabled="0"></default>
    </option>

    <option id="mysql.default_socket">
        <desc>Default socket name for local MySQL connects.  If empty, uses the built-in
MySQL defaults.</desc>
        <default disabled="0"></default>
    </option>

    <option id="mysql.default_host">
        <desc>Default host for mysql_connect() (doesn't apply in safe mode).</desc>
        <default disabled="0"></default>
    </option>

    <option id="mysql.default_user">
        <desc>Default user for mysql_connect() (doesn't apply in safe mode).</desc>
        <default disabled="0"></default>
    </option>

    <option id="mysql.default_password">
        <desc>Default password for mysql_connect() (doesn't apply in safe mode). 
Note that this is generally a *bad* idea to store passwords in this file. 
*Any* user with PHP access can run 'echo get_cfg_var("mysql.default_password") 
and reveal this password!  And of course, any users with read access to this 
file will be able to reveal the password as well.</desc>
        <default disabled="1"></default>
    </option>

    <option id="mysql.connect_timeout">
        <desc>Maximum time (in secondes) for connect timeout. -1 means no limit</desc>
        <default disabled="0">60</default>
    </option>

    <option id="mysql.trace_mode">
        <desc>Trace mode. When trace_mode is active (=On), warnings for table/index 
            scans and SQL-Errors will be displayed.</desc>
        <default disabled="0">Off</default>
    </option>
</section>

<section name="--MySQLi">
    <option id="mysqli.max_links">
        <desc>Maximum number of links.  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>

    <option id="mysqli.default_port">
        <desc>Default port number for mysqli_connect().  If unset, mysqli_connect() will 
use the $MYSQL_TCP_PORT or the mysql-tcp entry in /etc/services or the 
compile-time value defined MYSQL_PORT (in that order).  Win32 will only look 
at MYSQL_PORT.</desc>
        <default disabled="0">3306</default>
    </option>

    <option id="mysqli.default_socket">
        <desc>Default socket name for local MySQL connects.  If empty, uses the built-in 
MySQL defaults.</desc>
        <default disabled="0"></default>
    </option>

    <option id="mysqli.default_host">
        <desc>Default host for mysql_connect() (doesn't apply in safe mode).</desc>
        <default disabled="0"></default>
    </option>

    <option id="mysqli.default_user">
        <desc>Default user for mysql_connect() (doesn't apply in safe mode).</desc>
        <default disabled="0"></default>
    </option>

    <option id="mysqli.default_pw">
        <desc>Default password for mysqli_connect() (doesn't apply in safe mode).
Note that this is generally a *bad* idea to store passwords in this file.
*Any* user with PHP access can run 'echo get_cfg_var("mysqli.default_pw")
and reveal this password!  And of course, any users with read access to this
file will be able to reveal the password as well.</desc>
         <default disabled="0"></default>
    </option>

    <option id="mysqli.reconnect">
        <desc>Allow or prevent reconnect</desc>
        <default disabled="0">Off</default>
    </option>
</section>

<section name="--mSQL">
    <option id="msql.allow_persistent">
        <desc>Allow or prevent persistent links.</desc>
        <default disabled="0">On</default>
    </option>

    <option id="msql.max_persistent">
        <desc>Maximum number of persistent links.  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>

    <option id="msql.max_links">
        <desc>Maximum number of links (persistent+non persistent).  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>
</section>

<section name="--PostgresSQL">
    <option id="pgsql.allow_persistent">
        <desc>Allow or prevent persistent links.</desc>
        <default disabled="0">On</default>
    </option>

    <option id="pgsql.auto_reset_persistent">
        <desc>Detect broken persistent links always with pg_pconnect(). 
Auto reset feature requires a little overheads.</desc>
        <default disabled="0">Off</default>
    </option>

    <option id="pgsql.max_persistent">
        <desc>Maximum number of persistent links.  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>

    <option id="pgsql.max_links">
        <desc>Maximum number of links (persistent+non persistent).  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>

    <option id="pgsql.ignore_notice">
        <desc>Ignore PostgreSQL backends Notice message or not. 
Notice message logging require a little overheads.</desc>
        <default disabled="0">0</default>
    </option>

    <option id="pgsql.log_notice">
        <desc>Log PostgreSQL backends Noitce message or not. 
Unless pgsql.ignore_notice=0, module cannot log notice message.</desc>
        <default disabled="0">0</default>
    </option>
</section>

<section name="--Sybase">
    <option id="sybase.allow_persistent">
        <desc>Allow or prevent persistent links.</desc>
        <default disabled="0">On</default>
    </option>

    <option id="sybase.max_persistent">
        <desc>Maximum number of persistent links.  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>

    <option id="sybase.max_links">
        <desc>Maximum number of links (persistent + non-persistent).  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>

    <option id="sybase.interface_file">
        <desc></desc>
        <default disabled="0">"/usr/sybase/interfaces"</default>
    </option>

    <option id="sybase.min_error_severity">
        <desc>Minimum error severity to display.</desc>
        <default disabled="0">10</default>
    </option>

    <option id="sybase.min_message_severity">
        <desc>Minimum message severity to display.</desc>
        <default disabled="0">10</default>
    </option>

    <option id="sybase.compatability_mode">
        <desc>Compatability mode with old versions of PHP 3.0. 
If on, this will cause PHP to automatically assign types to results according 
to their Sybase type, instead of treating them all as strings.  This 
compatibility mode will probably not stay around forever, so try applying 
whatever necessary changes to your code, and turn it off.</desc>
        <default disabled="0">Off</default>
    </option>
</section>

<section name="--Sybase-CT">
    <option id="sybct.allow_persistent">
        <desc>Allow or prevent persistent links.</desc>
        <default disabled="0">On</default>
    </option>

    <option id="sybct.max_persistent">
        <desc>Maximum number of persistent links.  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>

    <option id="sybct.max_links">
        <desc>Maximum number of links (persistent + non-persistent).  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>

    <option id="sybct.min_server_severity">
        <desc>Minimum server message severity to display.</desc>
        <default disabled="0">10</default>
    </option>

    <option id="sybct.min_client_severity">
        <desc>Minimum client message severity to display.</desc>
        <default disabled="0">10</default>
    </option>
</section>

<section name="--bcmath">
    <option id="bcmath.scale">
        <desc>Number of decimal digits for all bcmath functions.</desc>
        <default disabled="0">0</default>
    </option>
</section>

<section name="--browscap">
    <option id="browscap">
        <desc></desc>
        <default disabled="1">extra/browscap.ini</default>
    </option>
</section>

<section name="--Informix">
    <option id="ifx.default_host">
        <desc>Default host for ifx_connect() (doesn't apply in safe mode).</desc>
        <default disabled="0"></default>
    </option>

    <option id="ifx.default_user">
        <desc>Default user for ifx_connect() (doesn't apply in safe mode).</desc>
        <default disabled="0"></default>
    </option>

    <option id="ifx.default_password">
        <desc>Default password for ifx_connect() (doesn't apply in safe mode).</desc>
        <default disabled="0"></default>
    </option>

    <option id="ifx.allow_persistent">
        <desc>Allow or prevent persistent links.</desc>
        <default disabled="0">On</default>
    </option>

    <option id="ifx.max_persistent">
        <desc>Maximum number of persistent links.  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>

    <option id="ifx.max_links">
        <desc>Maximum number of links (persistent + non-persistent).  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>

    <option id="ifx.textasvarchar">
        <desc>If on, select statements return the contents of a text blob instead of its id.</desc>
        <default disabled="0">0</default>
    </option>

    <option id="ifx.byteasvarchar">
        <desc>If on, select statements return the contents of a byte blob instead of its id.</desc>
        <default disabled="0">0</default>
    </option>

    <option id="ifx.charasvarchar">
        <desc>Trailing blanks are stripped from fixed-length char columns.  May help 
            the life of Informix SE users.</desc>
        <default disabled="0">0</default>
    </option>

    <option id="ifx.blobinfile">
        <desc>If on, the contents of text and byte blobs are dumped to a file instead of 
            keeping them in memory.</desc>
        <default disabled="0">0</default>
    </option>

    <option id="ifx.nullformat">
        <desc>NULL's are returned as empty strings, unless this is set to 1.  In that case, 
            NULL's are returned as string 'NULL'.</desc>
        <default disabled="0">0</default>
    </option>
</section>

<section name="--Session">
    <option id="session.save_handler">
        <desc>Handler used to store/retrieve data.</desc>
        <default disabled="0">files</default>
    </option>

    <option id="session.save_path">
        <desc>Argument passed to save_handler.  In the case of files, this is the path 
where data files are stored. Note: Windows users have to change this 
variable in order to use PHP's session functions. As of PHP 4.0.1, you can 
define the path as: 
            
    session.save_path = "N;/path" 
    where N is an integer. 
            
Instead of storing all the session files in /path, what this will do is use 
subdirectories N-levels deep, and store the session data in those directories.  
This is useful if you or your OS have problems with lots of files in one directory, 
and is a more efficient layout for servers that handle lots of sessions. 
            
    NOTE 1: PHP will not create this directory structure automatically. You can use 
    the script in the ext/session dir for that purpose. 
            
    NOTE 2: See the section on garbage collection below if you choose to use 
    subdirectories for session storage. The file storage module creates files using 
    mode 600 by default. You can change that by using 

    session.save_path = "N;MODE;/path"
    where MODE is the octal representation of the mode. 
    
    Note that this does not overwrite the process's umask.</desc>
        <default disabled="1">"/tmp"</default>
    </option>

    <option id="session.use_cookies">
        <desc>Whether to use cookies.</desc>
        <default disabled="0">1</default>
    </option>

    <option id="session.use_only_cookies">
        <desc>This option enables administrators to make their users invulnerable 
to attacks which involve passing session ids in URLs; defaults to 1.</desc>
        <default disabled="0">1</default>
    </option>

    <option id="session.name">
        <desc>Name of the session (used as cookie name).</desc>
         <default disabled="0">PHPSESSID</default>
    </option>

    <option id="session.auto_start">
        <desc>Initialize session on request startup.</desc>
        <default disabled="0">0</default>
    </option>

    <option id="session.cookie_lifetime">
        <desc>Lifetime in seconds of cookie or, if 0, until browser is restarted.</desc>
        <default disabled="0">0</default>
    </option>

    <option id="session.cookie_path">
        <desc>The path for which the cookie is valid.</desc>
        <default disabled="0">/</default>
    </option>

    <option id="session.cookie_domain">
        <desc>The domain for which the cookie is valid.</desc>
        <default disabled="0"></default>
    </option>

    <option id="session.serialize_handler">
        <desc>Handler used to serialize data.  php is the standard serializer of PHP.</desc>
        <default disabled="0">php</default>
    </option>

    <option id="session.gc_probability">
        <desc>Define the probability that the 'garbage collection' process is started 
on every session initialization. The probability is calculated by using 
gc_probability/gc_divisor, 
            
e.g. 1/100 means there is a 1% chance that the GC process starts 
on each request.</desc>
        <default disabled="0">1</default>
    </option>

    <option id="session.gc_divisor">
        <desc></desc>
        <default disabled="0">100</default>
    </option>

    <option id="session.gc_maxlifetime">
        <desc>After this number of seconds, stored data will be seen as 'garbage' and 
cleaned up by the garbage collection process.</desc>
        <default disabled="0">1440</default>
    </option>

    <option id="session.bug_compat_42">
        <desc>NOTE: If you are using the subdirectory option for storing session files 
(see session.save_path above), then garbage collection does *not* happen 
automatically.  You will need to do your own garbage collection through a 
shell script, cron entry, or some other method. 
For example, the following script would is the equivalent of setting 
session.gc_maxlifetime to 1440 (1440 seconds = 24 minutes):
            
    cd /path/to/sessions; find -cmin +24 | xargs rm

PHP 4.2 and less have an undocumented feature/bug that allows you to 
to initialize a session variable in the global scope, albeit register_globals 
is disabled.  PHP 4.3 and later will warn you, if this feature is used. 
You can disable the feature and the warning separately. At this time, the 
warning is only displayed, if bug_compat_42 is enabled.</desc>
        <default disabled="0">1</default>
    </option>

    <option id="session.bug_compat_warn">
        <desc></desc>
        <default disabled="0">1</default>
    </option>

    <option id="session.referer_check">
        <desc>Check HTTP Referer to invalidate externally stored URLs containing ids. 
HTTP_REFERER has to contain this substring for the session to be 
considered as valid.</desc>
        <default disabled="0"></default>
    </option>

    <option id="session.entropy_length">
        <desc>How many bytes to read from the file.</desc>
        <default disabled="1">0</default>
    </option>

    <option id="session.entropy_file">
        <desc>Specified here to create the session id.</desc>
        <default disabled="1"></default>
    </option>

    <option id="session.cache_limiter">
        <desc>Set to {nocache,private,public,} to determine HTTP caching aspects 
or leave this empty to avoid sending anti-caching headers.</desc>
        <default disabled="0">nocache</default>
    </option>

    <option id="session.cache_expire">
        <desc>Document expires after n minutes.</desc>
        <default disabled="0">180</default>
    </option>

    <option id="session.use_trans_sid">
        <desc>trans sid support is disabled by default. Use of trans sid may risk 
your users security. Use this option with caution.
        - User may send URL contains active session ID to other person via. 
email/irc/etc.
        - URL that contains active session ID may be stored in publically 
accessible computer.
        - User may access your site with the same session ID always using URL 
stored in browser's history or bookmarks.</desc>
         <default disabled="0">0</default>
    </option>

    <option id="session.hash_function">
        <desc>Select a hash function 
                        0: MD5   (128 bits)
                        1: SHA-1 (160 bits)</desc>
         <default disabled="0">0</default>
    </option>

    <option id="session.hash_bits_per_character">
        <desc>Define how many bits are stored in each character when converting the 
binary hash data to something readable. 
        4 bits: 0-9, a-f 
        5 bits: 0-9, a-v 
        6 bits: 0-9, a-z, A-Z, "-", ","</desc>
         <default disabled="0">4</default>
    </option>

    <option id="url_rewriter.tags">
        <desc><![CDATA[The URL rewriter will look for URLs in a defined set of HTML 
tags. form/fieldset are special; if you include them here, the rewriter will add 
a hidden <input> field with the info which is otherwise appended to URLs.  If 
you want XHTML conformity, remove the form entry. Note that all valid entries 
require a "=", even if no value follows.]]></desc>
        <default disabled="0">"a=href,area=href,frame=src,input=src,form=,fieldset="</default>
    </option>
</section>

<section name="--MSSQL">
    <option id="mssql.allow_persistent">
        <desc>Allow or prevent persistent links.</desc>
        <default disabled="0">On</default>
    </option>

    <option id="mssql.max_persistent">
        <desc>Maximum number of persistent links.  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>

    <option id="mssql.max_links">
        <desc>Maximum number of links (persistent+non persistent).  -1 means no limit.</desc>
        <default disabled="0">-1</default>
    </option>

    <option id="mssql.min_error_severity">
        <desc>Minimum error severity to display.</desc>
        <default disabled="0">10</default>
    </option>

    <option id="mssql.min_message_severity">
        <desc>Minimum message severity to display.</desc>
        <default disabled="0">10</default>
    </option>

    <option id="mssql.compatability_mode">
        <desc>Compatability mode with old versions of PHP 3.0.</desc>
        <default disabled="0">Off</default>
    </option>

    <option id="mssql.connect_timeout">
        <desc>Connect timeout</desc>
        <default disabled="1">5</default>
    </option>

    <option id="mssql.timeout">
        <desc>Query timeout</desc>
        <default disabled="1">60</default>
    </option>

    <option id="mssql.textlimit">
        <desc>Valid range 0 - 2147483647.  Default = 4096.</desc>
        <default disabled="1">4096</default>
    </option>

    <option id="mssql.textsize">
        <desc>Valid range 0 - 2147483647.  Default = 4096.</desc>
        <default disabled="1">4096</default>
    </option>

    <option id="mssql.batchsize">
        <desc>Limits the number of records in each batch.  0 = all records in one batch.</desc>
        <default disabled="1">0</default>
    </option>

    <option id="mssql.datetimeconvert">
        <desc><![CDATA[Specify how datetime and datetim4 columns are returned 
                On => Returns data converted to SQL server settings 
                Off => Returns values as YYYY-MM-DD hh:mm:ss]]></desc>
        <default disabled="1">On</default>
    </option>

    <option id="mssql.secure_connection">
        <desc>Use NT authentication when connecting to the server</desc>
        <default disabled="0">Off</default>
    </option>

    <option id="mssql.max_procs">
        <desc>Specify max number of processes.
            -1 = library default
            msdlib defaults to 25
            FreeTDS defaults to 4096</desc>
        <default disabled="1">-1</default>
    </option>

    <option id="mssql.charset">
        <desc>Specify client character set. If empty or not set the client charset 
from freetds.comf is used. This is only used when compiled with FreeTDS</desc>
        <default disabled="1">"ISO-8859-1"</default>
    </option>
</section>

<section name="--Assertion">
    <option id="assert.active">
        <desc>Assert(expr); active by default.</desc>
        <default disabled="1">On</default>
    </option>

    <option id="assert.warning">
        <desc>Issue a PHP warning for each failed assertion.</desc>
        <default disabled="1">On</default>
    </option>

    <option id="assert.bail">
        <desc>Don't bail out by default.</desc>
        <default disabled="1">Off</default>
    </option>

    <option id="assert.callback">
        <desc>User-function to be called if an assertion fails.</desc>
        <default disabled="1">0</default>
    </option>
    
    <option id="quiet_eval">
        <desc>Eval the expression with current error_reporting().  Set to true if you want 
error_reporting(0) around the eval().
        </desc>
        <default disabled="1">0</default>
    </option>
</section>

<section name="--Verisign Payflow Pro">
    <option id="pfpro.defaulthost">
        <desc>Default Payflow Pro server.</desc>
       <default disabled="0">"test-payflow.verisign.com"</default>
    </option>

    <option id="pfpro.defaultport">
        <desc>Default port to connect to.</desc>
        <default disabled="0">443</default>
    </option>

    <option id="pfpro.defaulttimeout">
        <desc>Default timeout in seconds.</desc>
        <default disabled="0">30</default>
    </option>

    <option id="pfpro.proxyaddress">
        <desc>Default proxy IP address (if required).</desc>
        <default disabled="1"></default>
    </option>

    <option id="pfpro.proxyport">
        <desc>Default proxy port.</desc>
        <default disabled="1"></default>
    </option>

    <option id="pfpro.proxylogon">
        <desc>Default proxy logon.</desc>
        <default disabled="1"></default>
    </option>

    <option id="pfpro.proxypassword">
        <desc>Default proxy password.</desc>
        <default disabled="1"></default>
    </option>
</section>

<section name="--COM">
    <option id="com.typelib_file">
        <desc>Path to a file containing GUIDs, IIDs or filenames of files with TypeLibs</desc>
        <default disabled="1"></default>
    </option>

    <option id="com.allow_dcom">
        <desc>Allow Distributed-COM calls</desc>
        <default disabled="1">true</default>
    </option>

    <option id="com.autoregister_typelib">
        <desc>Autoregister constants of a components typlib on com_load()</desc>
        <default disabled="1">true</default>
    </option>

    <option id="com.autoregister_casesensitive">
        <desc>Register constants casesensitive</desc>
         <default disabled="1">false</default>
    </option>
</section>

<section name="--mbstring">
    <option id="mbstring.language">
        <desc>Show warnings on duplicate constat registrations
language for internal character representation.</desc>
        <default disabled="1">Japanese</default>
    </option>

    <option id="mbstring.internal_encoding">
        <desc>Internal/Script encoding. Some encoding cannot work as internal 
encoding. (e.g. SJIS, BIG5, ISO-2022-*)</desc>
         <default disabled="1">EUC-JP</default>
    </option>

    <option id="mbstring.http_input">
        <desc>HTTP input encoding.</desc>
         <default disabled="1">auto</default>
    </option>

    <option id="mbstring.http_output">
        <desc>HTTP output encoding. mb_output_handler must be registered as 
output buffer to function</desc>
         <default disabled="1">SJIS</default>
    </option>

    <option id="mbstring.encoding_translation">
        <desc>Enable automatic encoding translation according to 
mbstring.internal_encoding setting. Input chars are converted to internal 
encoding by setting this to On.
            
Note: Do _not_ use automatic encoding translation for portable libs/applications.</desc>
         <default disabled="1">Off</default>
    </option>

    <option id="mbstring.detect_order">
        <desc>Automatic encoding detection order.</desc>
        <default disabled="1">auto</default>
    </option>

    <option id="mbstring.substitute_character">
        <desc>substitute_character used when character cannot be converted
one from another</desc>
        <default disabled="1">none;</default>
    </option>

    <option id="mbstring.func_overload">
        <desc>Overload(replace) single byte functions by mbstring functions. 
mail(), ereg(), etc are overloaded by mb_send_mail(), mb_ereg(), etc. 
Possible values are 0,1,2,4 or combination of them.
For example, 7 for overload everything.
        0: No overload
        1: Overload mail() function
        2: Overload str*() functions
        4: Overload ereg*() functions</desc>
         <default disabled="1">0</default>
    </option>
</section>

<section name="--FrontBase">
    <option id="fbsql.allow_persistent">
        <desc></desc>
        <default disabled="1">On</default>
    </option>

    <option id="fbsql.autocommit">
        <desc></desc>
        <default disabled="1">On</default>
    </option>

    <option id="fbsql.default_database">
        <desc></desc>
        <default disabled="1"></default>
    </option>

    <option id="fbsql.default_database_password">
        <desc></desc>
        <default disabled="1"></default>
    </option>

    <option id="fbsql.default_host">
        <desc></desc>
        <default disabled="1"></default>
    </option>

    <option id="fbsql.default_password">
        <desc></desc>
        <default disabled="1"></default>
    </option>

    <option id="fbsql.default_user">
        <desc></desc>
        <default disabled="1">"_SYSTEM"</default>
    </option>

    <option id="fbsql.generate_warnings">
        <desc></desc>
        <default disabled="1">Off</default>
    </option>

    <option id="fbsql.max_connections">
        <desc></desc>
        <default disabled="1">128</default>
    </option>

    <option id="fbsql.max_links">
        <desc></desc>
        <default disabled="1">128</default>
    </option>

    <option id="fbsql.max_persistent">
        <desc></desc>
        <default disabled="1">-1</default>
    </option>

    <option id="fbsql.max_results">
        <desc></desc>
        <default disabled="1">128</default>
    </option>

    <option id="fbsql.batchSize">
        <desc></desc>
        <default disabled="1">1000</default>
    </option>
</section>

<section name="--exif">
    <option id="exif.encode_unicode">
        <desc>Exif UNICODE user comments are handled as UCS-2BE/UCS-2LE 
and JIS as JIS. With mbstring support this will automatically be converted 
into the encoding given by corresponding encode setting. When empty 
mbstring.internal_encoding is used. For the decode settings you can 
distinguish between motorola and intel byte order. A decode setting 
cannot be empty.</desc>
        <default disabled="1">ISO-8859-15</default>
    </option>

    <option id="exif.decode_unicode_motorola">
        <desc></desc>
        <default disabled="1">UCS-2BE</default>
    </option>

    <option id="exif.decode_unicode_intel">
        <desc></desc>
        <default disabled="1">UCS-2LE</default>
    </option>

    <option id="exif.encode_jis">
        <desc></desc>
        <default disabled="1"></default>
    </option>

    <option id="exif.decode_jis_motorola">
        <desc></desc>
        <default disabled="1">JIS</default>
    </option>

    <option id="exif.decode_jis_intel">
        <desc></desc>
        <default disabled="1">JIS</default>
    </option>
</section>

<section name="--Tidy">
    <option id="tidy.default_config">
        <desc>The path to a default tidy configuration file to use when using tidy</desc>
         <default disabled="0">/usr/local/lib/php/default.tcfg</default>
    </option>

    <option id="tidy.clean_output">
        <desc>Should tidy clean and repair output automatically? 
WARNING: Do not use this option if you are generating non-html content 
such as dynamic images</desc>
         <default disabled="1">Off</default>
    </option>
</section>

<section name="--soap">
    <option id="soap.wsdl_cache_enabled">
        <desc>Enables or disables WSDL caching feature.</desc>
        <default disabled="0">1</default>
    </option>

    <option id="soap.wsdl_cache_dir">
        <desc>Sets the directory name where SOAP extension will put cache files.</desc>
        <default disabled="0">"/tmp"</default>
    </option>

    <option id="soap.wsdl_cache_ttl">
        <desc>(time to live) Sets the number of second while cached file will be used 
instead of original one.</desc>
        <default disabled="0">86400</default>
    </option>
</section>
    
</php-config-options>
